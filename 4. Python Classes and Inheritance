course_4_assessment_1


Define a class called Bike that accepts a string and a float as input, and assigns those inputs respectively to two instance variables, color and price. Assign to the variable testOne an instance of Bike whose color is blue and whose price is 89.99. Assign to the variable testTwo an instance of Bike whose color is purple and whose price is 25.0.

class Bike():
    def __init__(self, x, y):
        self.color = x
        self.price = y
testOne = Bike('blue', 89.99)
testTwo = Bike('purple', 25.0)


Create a class called AppleBasket whose constructor accepts two inputs: a string representing a color, and a number representing a quantity of apples. The constructor should initialize two instance variables: apple_color and apple_quantity. Write a class method called increase that increases the quantity by 1 each time it is invoked. You should also write a __str__ method for this class that returns a string of the format: "A basket of [quantity goes here] [color goes here] apples." e.g. "A basket of 4 red apples." or "A basket of 50 blue apples." (Writing some test code that creates instances and assigns values to variables may help you solve this problem!)

class AppleBasket():
    def __init__(self, x, y):
        self.apple_color = x
        self.apple_quantity = y
    def increase(self):
        self.apple_quantity += 1
    def __str__(self):
        return "A basket of {} {} apples.".format(self.apple_quantity,self.apple_color )

Define a class called BankAccount that accepts the name you want associated with your bank account in a string, and an integer that represents the amount of money in the account. The constructor should initialize two instance variables from those inputs: name and amt. Add a string method so that when you print an instance of BankAccount, you see "Your account, [name goes here], has [start_amt goes here] dollars." Create an instance of this class with "Bob" as the name and 100 as the amount. Save this to the variable t1.

class BankAccount():
    def __init__(self, string, integer):
        self.name = string
        self.amt = integer
    def __str__(self):
        return "Your account, {}, has {} dollars.".format(self.name,self.amt)
t1 = BankAccount('Bob',100)




course_4_assessment_2



The class, Pokemon, is provided below and describes a Pokemon and its leveling and evolving characteristics. An instance of the class is one pokemon that you create.

Grass_Pokemon is a subclass that inherits from Pokemon but changes some aspects, for instance, the boost values are different.

For the subclass Grass_Pokemon, add another method called action that returns the string "[name of pokemon] knows a lot of different moves!". Create an instance of this class with the name as "Belle". Assign this instance to the variable p1.






    def action(self):
        return "{} knows a lot of different moves!". format(self.name)
p1 = Grass_Pokemon('Belle')






Modify the Grass_Pokemon subclass so that the attack strength for Grass_Pokemon instances does not change until they reach level 10. At level 10 and up, their attack strength should increase by the attack_boost amount when they are trained.

To test, create an instance of the class with the name as "Bulby". Assign the instance to the variable p2. Create another instance of the Grass_Pokemon class with the name set to "Pika" and assign that instance to the variable p3. Then, use Grass_Pokemon methods to train the p3 Grass_Pokemon instance until it reaches at least level 10.



    def attack_up(self):
        if self.level >= 10:
            self.attack = self.attack + self.attack_boost
        return self.attack

p2= Grass_Pokemon('Bulby')
p3 = Grass_Pokemon('Pika', level = 10)
p3.train()





Along with the Pokemon parent class, we have also provided several subclasses. Write another method in the parent class that will be inherited by the subclasses. Call it opponent. It should return which type of pokemon the current type is weak and strong against, as a tuple.

Grass is weak against Fire and strong against Water

Ghost is weak against Dark and strong against Psychic

Fire is weak against Water and strong against Grass

Flying is weak against Electric and strong against Fighting

For example, if the p_type of the subclass is 'Grass', .opponent() should return the tuple ('Fire', 'Water')


class Pokemon():
    attack = 12
    defense = 10
    health = 15
    p_type = "Normal"

    def __init__(self, name,level = 5):
        self.name = name
        self.level = level
        self.weak = "Normal"
        self.strong = "Normal"

    def train(self):
        self.update()
        self.attack_up()
        self.defense_up()
        self.health_up()
        self.level = self.level + 1
        if self.level%self.evolve == 0:
            return self.level, "Evolved!"
        else:
            return self.level

    def attack_up(self):
        self.attack = self.attack + self.attack_boost
        return self.attack

    def defense_up(self):
        self.defense = self.defense + self.defense_boost
        return self.defense

    def health_up(self):
        self.health = self.health + self.health_boost
        return self.health

    def update(self):
        self.health_boost = 5
        self.attack_boost = 3
        self.defense_boost = 2
        self.evolve = 10

    def __str__(self):
        self.update()
        return "Pokemon name: {}, Type: {}, Level: {}".format(self.name, self.p_type, self.level)

    def opponent(self):
        return self.weak, self.strong
    
    
class Grass_Pokemon(Pokemon):
    attack = 15
    defense = 14
    health = 12
    p_type = "Grass"
    
    def __init__(self, name, level = 5):
        self.name = name
        self.level = level
        self.weak = 'Fire'
        self.strong= 'Water'

    def update(self):
        self.health_boost = 6
        self.attack_boost = 2
        self.defense_boost = 3
        self.evolve = 12

class Ghost_Pokemon(Pokemon):
    p_type = "Ghost"
    def __init__(self, name, level = 5):
        self.name = name
        self.level = level
        self.weak = 'Dark'
        self.strong= 'Psychic'
    def update(self):
        self.health_boost = 3
        self.attack_boost = 4
        self.defense_boost = 3

class Fire_Pokemon(Pokemon):
    p_type = "Fire"
    def __init__(self, name, level = 5):
        self.name = name
        self.level = level
        self.weak = 'Water'
        self.strong= 'Grass'
class Flying_Pokemon(Pokemon):
    p_type = "Flying"
    def __init__(self, name, level = 5):
        self.name = name
        self.level = level
        self.weak = 'Electric'
        self.strong= 'Fighting'

